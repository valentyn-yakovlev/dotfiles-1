#+title: ~/.config/dotfiles

#+begin_example
$ [[ -d ~/.config ]] || mkdir ~/.config && cd ~/.config
$ git clone --recursive git@github.com:eqyiel/dotfiles.git && cd dotfiles
$ ./bin/git/create-hook-symlinks
$ ./go.py --stow --all
#+end_example

* JS
** =eslint-cli=

   Use this instead of global installation of =eslint=.  It will find a
   project's local version of =eslint= and run that.

** =tern=

   Don't forget to add =.tern-port= to your =.gitignore=.

** =nvm=

   I used to use =nvm= at work to manage the transient global =node= version.
   It turns out that [[http://anderspapitto.com/posts/2016-10-04-transient-global-environments-the-third-path.html][Nix does this much better]].

   So just use =nix-env --query= to see what versions of =node= are available in
   the current profile, =nix-env --query --available nodejs= to see what
   versions are available and so on.

* GNOME 3

  Gnome uses its own registry thing (~dconf~) for a bunch of configuration and
  stateful data, so there's a hook in this repo that saves the output of ~dconf
  dump~ when commiting.

  On a new machine you probably have to import it, see the script
  ~bin/dconf-restore~.

* NixOS

** =nix-env=

   By default, =nix-env= ignores =$NIX_PATH=.  So if you want to use a local
   checkout of =nixpkgs= instead of the configured channel, you have to tell it
   to use =nixpkgs= like so:

   #+begin_example
   nix-env -f '<nixpkgs>' -i rkm
   #+end_example

* OSX Gotchas

  We're locked into Apple at work.  Use virtual machine to get actual
  work done.  There's some stuff you can do to make life more
  comfortable on the host though.

  Install homebrew and:

  #+begin_example
  $ brew tap homebrew/versions
  $ brew install homebrew/versions/gnupg21
  $ brew install pass stow
  $ brew cask install virtualbox chromium slack 1password transmit harvest sketch iterm2
  #+end_example

  For the virtual machine, set interface 1 to NAT, second to Host-only Adapter.
  You can SSH to the IP address of host-only adapter's interface.

** Karabiner-Elements

   [[https://www.nadeau.tv/configure-hyper-key-osx/][I used to do something like this]] to fake a hyper key, but Karabiner
   and Seil don't work properly in Sierra.
  
   [[https://github.com/tekezo/Karabiner-Elements/pull/170][Keep an eye on the shitstorm here]].  If that gets resolved we can probably use
   karabiner-elements from ~brew cask~.

** 1password

   1password doesn't like Chromium.  Install the OSX app and go to preferences →
   advanced → uncheck verify browser code signature.

** =Terminal.app=                                                    :ATTACH:
   :PROPERTIES:
   :ID:       C20586D7-52CA-4AF4-9065-BC70C4C5BB96
   :Attachments: osx-terminal_2016-09-26_10-03-02.png
   :END:
*** Rescue Meta

   Make sure "Use Option as Meta key" is checked.
   #+DOWNLOADED: file:/Users/rkm/Desktop/osx-terminal.png @ 2016-09-26 10:03:03
   [[file:data/C2/0586D7-52CA-4AF4-9065-BC70C4C5BB96/osx-terminal_2016-09-26_10-03-02.png]]

** iTerm2
*** Rescue Meta                                                      :ATTACH:

    :PROPERTIES:
    :ID:       69648A9D-1C24-447A-9FBF-88C649315B0F
    :Attachments: iterm2_2016-09-26_10-04-21.png
    :END:

    Make sure options "Left option key acts as..." are set to ~+Esc~.

    #+DOWNLOADED: file:/Users/rkm/Desktop/iterm2.png @ 2016-09-26 10:04:21
    [[file:data/69/648A9D-1C24-447A-9FBF-88C649315B0F/iterm2_2016-09-26_10-04-21.png]]

*** Rescue clipboard                                                 :ATTACH:
    :PROPERTIES:
    :ID:       1B1C9326-036A-438B-837D-38C365CEE7F6
    :Attachments: iterm2-clipboard_2016-10-12_09-28-47.png
    :END:

    Make sure 'Applications in terminal may access clipboard' is checked.

    #+DOWNLOADED: file:/Users/rkm/Desktop/iterm2-clipboard.png @ 2016-10-12 09:28:47
    [[file:data/1B/1C9326-036A-438B-837D-38C365CEE7F6/iterm2-clipboard_2016-10-12_09-28-47.png]]
** On the guest

   Chances are we'll need to work with some BSCMS, so make a `mysql` user:

   #+begin_example
   eqyiel@localghost ~ % mysql -u root
   Welcome to the MariaDB monitor.  Commands end with ; or \g.
   Your MariaDB connection id is 2
   Server version: 10.1.19-MariaDB MariaDB Server

   Copyright (c) 2000, 2016, Oracle, MariaDB Corporation Ab and others.

   Type 'help;' or '\h' for help. Type '\c' to clear the current input statement.

   MariaDB [(none)]> create user 'pleb'@'localhost' identified by 'password';
   Query OK, 0 rows affected (0.01 sec)

   MariaDB [(none)]> grant all privileges on *.* to 'pleb'@'localhost';
   Query OK, 0 rows affected (0.00 sec)

   MariaDB [(none)]> flush privileges;
   Query OK, 0 rows affected (0.00 sec)

   MariaDB [(none)]>
   #+end_example

** ~pinentry-curses~ is on the wrong TTY / spewing all over the screen

   I don't think this problem is exclusive to macOS but I rarely need to use
   pinentry remotely otherwise.

   From [[http://unix.stackexchange.com/a/280974][Stack Exchange]]:

   #+begin_quote
     The gpg-agent man page explains under the option --enable-ssh-support that
     the ssh agent protocol is not able to provide the name of the tty to the
     agent, so it defaults to using the original terminal it was started
     in. Before running the ssh command that requires a passphrase in a new
     terminal you need to type

     #+begin_example
       gpg-connect-agent updatestartuptty /bye
     #+end_example

     in the new terminal to update the agent's view of which tty or display to
     use.
   #+end_quote

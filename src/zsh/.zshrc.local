# ~/.zshrc.local -*- mode: shell-script; -*-

stty -ixon # disable stop
# Get rid of pause on control-S
# stty stop '^[[5~' # Pause key

autoload -U select-word-style
select-word-style bash

# if islinux; then
#   # Arch Build System
#   ABSROOT="${HOME}/build/abs"
#   # Android
#   ANDROID_HOME="/opt/android-sdk"
#   alias emacs="GTK_THEME=Adwaita:dark emacs"
#   PATH="${HOME}/.local/bin:${PATH}"
#   MANPATH="${HOME}/.local/share/man:${MANPATH}"
#   INFOPATH="${HOME}/.local/share/info:${INFOPATH}"
#   BROWSER="firefox"
#   GTAGSLIBPATH="${HOME}/.cache/gtags"
#   TEXMFHOME="${HOME}/local/share/texmf"
#   kpsewhich -var-value TEXMFHOME
#   PATH="${HOME}/.gem/ruby/2.3.0/bin:${PATH}"
# fi

# if isdarwin; then
#   PATH="/usr/local/opt/coreutils/libexec/gnubin:${PATH}"
#   PATH="${HOME}/.local/bin:${PATH}"
#   PATH="${HOME}/Library/Python/2.7/bin:${PATH}"
#   PATH="$(brew --prefix php54):${PATH}"
#   PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting
#   [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"
#   MANPATH="/usr/local/opt/coreutils/libexec/gnuman:${MANPATH}"
#   PATH="/usr/local/sbin:${PATH}"
#   source "${HOME}/.nix-profile/etc/profile.d/nix.sh"
#   [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"
#   NIX_PATH="/nix/var/nix/profiles/per-user/rkm/channels/nixos"
#   # HOMEBREW_GITHUB_API_TOKEN=$(pass ls oauth/homebrew)
# fi

# Don't set a prefix in ~/.npmrc, it doesn't do variable expansion very well.
# It will read from $PREFIX if no prefix is defined in this file and it will be
# observed by yarn as well.
# https://github.com/yarnpkg/yarn/issues/2017#issuecomment-262692935
export PREFIX="${HOME}/.local"

# if [[ -d "${HOME}/.nixpkgs/nixpkgs" ]]; then
#   export NIX_PATH="${HOME}/.nixpkgs/nixpkgs/nixos:nixpkgs=${HOME}/.nixpkgs/nixpkgs"
# fi

# NIX_CHANNEL="${HOME}/.nix-defexpr/channels/nixos"
# export NIX_PATH="${NIX_CHANNEL}:nixpkgs=${NIX_CHANNEL}/pkgs"

# alias nix-shell="nix-shell --command zsh"

# Don't use x11-ssh-askpass
unset SSH_ASKPASS

# Prevent accidentally clobbering files
alias rm="rm -iv"
alias cp="cp -ivr"
alias mv="mv -iv"
set -o noclobber

alias curl="curl --write-out @-<\"${HOME}/.config/curl/write-out.txt\""
alias cower="cower --color=auto"
alias exif-rename="jhead -autorot -n%Y-%m-%d-%04i"
alias lsoctal="stat -c \"%a %n\""

# pacman
alias rmakepkg="PKGDEST=~/build/repo makepkg -srf --sign --key 3311FA17"
PACKAGER="Ruben Maher <r@rkm.id.au>"

# alias emacs="GTK_THEME=Adwaita:dark emacs"

HISTFILE="${HOME}/.zsh_history"
HISTSIZE=1000000
SAVEHIST=1000000

if [[ -z $(pgrep gpg-agent) ]]; then
  eval $(gpg-agent --daemon --enable-ssh-support --sh)
fi

if islinux; then
  export SSH_AUTH_SOCK="/run/user/$(id -u)/gnupg/S.gpg-agent.ssh"
fi

if isdarwin; then
  export SSH_AUTH_SOCK="${HOME}/.gnupg/S.gpg-agent.ssh"
fi

# export GPG_TTY=$(tty)

export MSMTP_QUEUE="${HOME}/.cache/msmtp/queue"
test -d "$MSMTP_QUEUE" || mkdir -p "$MSMTP_QUEUE"

export MSMTP_LOG="${MSMTP_QUEUE}/log"
test -f "$MSMTP_LOG" || touch "$MSMTP_LOG"
# Use faster ping test when msmtpq tests for a connection
export EMAIL_CONN_TEST="P"
# Gnus pipes the output of `sendmail-program' to a buffer and expects it to be
# empty if there was no error.  Suppress the chattiness of msmtpq to avoid erros
# like
export EMAIL_QUEUE_QUIET="t"

# # Set dircolors for ls
# d="${HOME}/.local/lib/dircolors-solarized/dircolors.ansi-dark"
# test -r $d && eval "$(dircolors $d)"

TERM=xterm-256color
[ -n "$TMUX" ] && export TERM=screen-256color
LESSHISTFILE=/dev/null # don't want ~/.lesshst
LC_COLLATE="C"
PAGER="less -R"
EDITOR="emacsclient -t -a vi"
VISUAL="emacsclient -t -a vi"

# Tramp doesn't work if the prompt doesn't match its regexp
if [[ "$TERM" == "dumb" ]]
then
  unsetopt zle
  unsetopt prompt_cr
  unsetopt prompt_subst
  unfunction precmd # may not exist on Debian Jessie
  unfunction preexec # may not exist on Debian Jessie
  PS1='$ '
fi

# for certain calibre plugins, Windows VSTs
WINEARCH=win32
WINEPREFIX="${HOME}/.wine32"

# for Ardour
# VST_PATH=~/media/music/plugins/vst
# LADSPA_PATH=~/media/music/plugins/ladspa:/usr/lib/ladspa
# LV2_PATH=~/media/music/plugins/lv2:/usr/lib/lv2
# LXVST_PATH=~/media/music/plugins/lxvst

# Mirror a website or some subdirectory
function mirror() {
  wget \
    --mirror \
    --page-requisites \
    --adjust-extension \
    --no-parent \
    --convert-links \
    $1
}

function eg() {
  MAN_KEEP_FORMATTING=1 man "$@" 2>/dev/null \
      | sed --quiet --expression='/^E\(\x08.\)X\(\x08.\)\?A\(\x08.\)\?M\(\x08.\)\?P\(\x08.\)\?L\(\x08.\)\?E/{:a;p;n;/^[^ ]/q;ba}' \
      | ${MANPAGER:-${PAGER:-pager -s}}
}

function ec2() {
  export AWS_ACCESS_KEY="$(pass mango/aws/$1/access-key-id | head -n 1)"
  export AWS_SECRET_KEY="$(pass mango/aws/$1/secret-access-key | head -n 1)"
  export EC2_URL="https://ec2.ap-southeast-2.amazonaws.com"
  # for nixops
  export EC2_ACCESS_KEY=$AWS_ACCESS_KEY
  export EC2_SECRET_KEY=$AWS_SECRET_KEY
}

function get-images-from-pdf () {
  gs -dBATCH -dNOPAUSE -sDEVICE=png16m -dGraphicsAlphaBits=4 \
     -dTextAlphaBits=4 -r150 -sOutputFile=./output%d.png ${1};
}

function upgrade-casks() {
  for package in $(brew cask outdated); do
    brew cask reinstall "$(echo $package | cut -d ' ' -f 1)"
  done
}

source "${HOME}/.local/share/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
source "${HOME}/.local/share/zsh/zsh-autosuggestions/zsh-autosuggestions.zsh"

__fzf_use_tmux__() {
  [ -n "$TMUX_PANE" ] && [ "${FZF_TMUX:-0}" != 0 ] && [ ${LINES:-40} -gt 15 ]
}

__fzfcmd() {
  __fzf_use_tmux__ &&
    echo "fzf-tmux -d${FZF_TMUX_HEIGHT:-40%}" || echo "fzf"
}

# CTRL-R - Paste the selected command from history into the command line
fzf-history-widget() {
  local selected num
  setopt localoptions noglobsubst pipefail 2> /dev/null
  selected=( $(fc -l 1 |
    FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-40%} --reverse $FZF_DEFAULT_OPTS +s --tac -n2..,.. --tiebreak=index --bind=ctrl-r:toggle-sort $FZF_CTRL_R_OPTS --query=${(q)LBUFFER} +m" $(__fzfcmd) -q '^') )
  local ret=$?
  if [ -n "$selected" ]; then
    num=$selected[1]
    if [ -n "$num" ]; then
      zle vi-fetch-history -n $num
    fi
  fi
  zle redisplay
  typeset -f zle-line-init >/dev/null && zle zle-line-init
  return $ret
}

zle     -N   fzf-history-widget
bindkey '^S' fzf-history-widget
bindkey '^R' fzf-history-widget
bindkey '^ ' autosuggest-accept # C-SPACE

eval "$(/run/current-system/sw/bin/direnv hook zsh)"

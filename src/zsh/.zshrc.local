# ~/.zshrc.local -*- mode: shell-script; -*-

stty -ixon # disable stop
# Get rid of pause on control-S
# stty stop '^[[5~' # Pause key

autoload -U select-word-style
select-word-style bash

gpg_p="$(pgrep gpg-agent)"

if [[ $? -eq 1 ]]; then
    eval "$(gpg-agent --daemon --enable-ssh-support --sh)"
fi
SSH_AUTH_SOCK="/Users/rkm/.gnupg/S.gpg-agent.ssh"

if islinux; then
   # Arch Build System
   ABSROOT="${HOME}/build/abs"
   # Android
   ANDROID_HOME="/opt/android-sdk"
   alias emacs="GTK_THEME=Adwaita:dark emacs"
   PATH="${HOME}/.local/bin:${PATH}"
   MANPATH="${HOME}/.local/share/man:${MANPATH}"
   INFOPATH="${HOME}/.local/share/info:${INFOPATH}"
   BROWSER="firefox"
   GTAGSLIBPATH="${HOME}/.cache/gtags"
fi

if isdarwin; then
    # If you change NPM_PACKAGES be sure to change the prefix in ~/.npmrc too
    # (I don't know why it doesn't respect this by default) :(
    # See also: http://stackoverflow.com/a/13021677
    NPM_PACKAGES="${HOME}/.npm-packages"
    PATH="/usr/local/opt/coreutils/libexec/gnubin:${PATH}"
    PATH="${HOME}/.local/bin:${PATH}"
    PATH="${NPM_PACKAGES}/bin:${PATH}"
    PATH="${HOME}/Library/Python/2.7/bin:${PATH}"
    PATH="$(brew --prefix php54):${PATH}"
    PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting
    [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"
    MANPATH="/usr/local/opt/coreutils/libexec/gnuman:${MANPATH}"
    PATH="/usr/local/sbin:${PATH}"
    MANPATH="${NPM_PACKAGES}/share/man:${MANPATH}"
    NODE_PATH="$NPM_PACKAGES/lib/node_modules:$NODE_PATH"
    NVM_DIR="${HOME}/.nvm"
    source $(brew --prefix nvm)/nvm.sh
    source "${HOME}/.nix-profile/etc/profile.d/nix.sh"
    [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"
    NIX_PATH="/nix/var/nix/profiles/per-user/rkm/channels/nixos"
    # HOMEBREW_GITHUB_API_TOKEN=$(pass ls oauth/homebrew)
fi

PATH="${PATH}:${HOME}/.yarn/bin"

# Prevent accidentally clobbering files
alias rm="rm -iv"
alias cp="cp -ivr"
alias mv="mv -iv"
set -o noclobber

alias curl="curl --write-out @-<\"${HOME}/.config/curl/write-out.txt\""
alias cower="cower --color=auto"
alias exif-rename="jhead -autorot -n%Y-%m-%d-%04i"
alias lsoctal="stat -c \"%a %n\""

# pacman
alias rmakepkg="PKGDEST=~/build/repo makepkg -srf --sign --key 3311FA17"
PACKAGER="Ruben Maher <r@rkm.id.au>"

HISTFILE="${HOME}/.zsh_history"
HISTSIZE=1000000
SAVEHIST=1000000

# Set dircolors for ls
d="${HOME}/.local/lib/dircolors-solarized/dircolors.ansi-dark"
test -r $d && eval "$(dircolors $d)"

TERM=xterm-256color
[ -n "$TMUX" ] && export TERM=screen-256color
LESSHISTFILE=/dev/null # don't want ~/.lesshst
LC_COLLATE="C"
PAGER=less
EDITOR="emacsclient -t -a vi"
VISUAL="emacsclient -t -a vi"
TEXMFHOME="${HOME}/.local/share/texmf"

# Tramp doesn't work if the prompt doesn't match its regexp
if [[ "$TERM" == "dumb" ]]
then
  unsetopt zle
  unsetopt prompt_cr
  unsetopt prompt_subst
  unfunction precmd # may not exist on Debian Jessie
  unfunction preexec # may not exist on Debian Jessie
  PS1='$ '
fi

# for certain calibre plugins, Windows VSTs
WINEARCH=win32
WINEPREFIX="${HOME}/.wine32"

# for Ardour
# VST_PATH=~/media/music/plugins/vst
# LADSPA_PATH=~/media/music/plugins/ladspa:/usr/lib/ladspa
# LV2_PATH=~/media/music/plugins/lv2:/usr/lib/lv2
# LXVST_PATH=~/media/music/plugins/lxvst

function eg() {
    MAN_KEEP_FORMATTING=1 man "$@" 2>/dev/null \
        | sed --quiet --expression='/^E\(\x08.\)X\(\x08.\)\?A\(\x08.\)\?M\(\x08.\)\?P\(\x08.\)\?L\(\x08.\)\?E/{:a;p;n;/^[^ ]/q;ba}' \
        | ${MANPAGER:-${PAGER:-pager -s}}
}

function ec2() {
  export AWS_ACCESS_KEY="$(pass mango/aws/$1/access-key-id | head -n 1)"
  export AWS_SECRET_KEY="$(pass mango/aws/$1/secret-access-key | head -n 1)"
  export EC2_URL="https://ec2.ap-southeast-2.amazonaws.com"
  # for nixops
  export EC2_ACCESS_KEY=$AWS_ACCESS_KEY
  export EC2_SECRET_KEY=$AWS_SECRET_KEY
}

function get-images-from-pdf () {
  gs -dBATCH -dNOPAUSE -sDEVICE=png16m -dGraphicsAlphaBits=4 \
     -dTextAlphaBits=4 -r150 -sOutputFile=./output%d.png ${1};
}

source "${HOME}/.local/share/zsh/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
source "${HOME}/.local/share/zsh/zsh-cdr/cdr.plugin.zsh"
source "${HOME}/.local/share/zsh/zsh-notify/notify.plugin.zsh"
source "${HOME}/.local/share/zsh/zaw/zaw.zsh"

bindkey '^S' zaw-history
bindkey '^R' zaw-history
bindkey -M filterselect '^S' down-line-or-history
bindkey -M filterselect '^R' up-line-or-history

eval "$(direnv hook zsh)"

{
  // Requires that a function expression be named.
  "disallowAnonymousFunctions": false,

  // Disallows arrow functions.
  "disallowArrowFunctions": false,

  // Requires the first alphabetical character of a comment to be lowercase.
  "disallowCapitalizedComments": false,

  // Disallows commas as last token on a line in lists.
  "disallowCommaBeforeLineBreak": false,

  // Disallows curly braces after statements.
  "disallowCurlyBraces": false,

  // Disallows identifiers that start or end in _.
  "disallowDanglingUnderscores": false,

  // Disallows empty blocks (except for catch blocks).
  "disallowEmptyBlocks": false,

  // Disallows function declarations.
  "disallowFunctionDeclarations": false,

  // // Disallows identical destructuring names for the key and value in favor of
  // // using shorthand destructuring.
  // "disallowIdenticalDestructuringNames": false,

  // Disallows a specified set of identifier names.
  "disallowIdentifierNames": false,

  // Disallows implicit type conversion.
  "disallowImplicitTypeConversion": false,

  // Disallows keywords in your comments, such as TODO or FIXME
  "disallowKeywordsInComments": false,

  // Disallows placing keywords on a new line.
  "disallowKeywordsOnNewLine": false,

  // Disallows usage of specified keywords.
  "disallowKeywords": false,

  // Requires lines to not contain both spaces and tabs consecutively, or spaces
  // after tabs only for alignment if "smart"
  "disallowMixedSpacesAndTabs": true,

  // // Disallows the test, consequent and alternate to be on separate lines when
  // // using the ternary operator.
  // "disallowMultiLineTernary": false,

  // Disallows multiple blank lines in a row.
  "disallowMultipleLineBreaks": true,

  // Disallows strings that span multiple lines without using concatenation.
  "disallowMultipleLineStrings": true,

  // Disallows multiple indentation characters (tabs or spaces) between
  // identifiers, keywords, and any other token
  "disallowMultipleSpaces": {"allowEOLComments": true},

  // Disallows multiple var declaration (except for-loop).
  "disallowMultipleVarDecl": false,

  // Disallows unassigned functions to be named inline
  "disallowNamedUnassignedFunctions": false,

  // // Disallows nested ternaries.
  // "disallowNestedTernaries": false,

  // Disallows newline before opening curly brace of all block statements.
  "disallowNewlineBeforeBlockStatements": false,

  // Disallow use of certain node types (from Esprima/ESTree).
  "disallowNodeTypes": false,

  // Disallows the not, not equals, and strict not equals operators in
  // conditionals.
  "disallowNotOperatorsInConditionals": false,

  // Disallows placing object keys on new line
  "disallowObjectKeysOnNewLine": false,

  // Requires putting certain operators on the next line rather than on the
  // current line before a line break.
  "disallowOperatorBeforeLineBreak": false,

  // Disallow a newline after blocks
  "disallowPaddingNewLinesAfterBlocks": false,

  // Disallow a blank line after 'use strict'; statements
  "disallowPaddingNewLinesAfterUseStrict": false,

  // Disallows newline before module.exports
  "disallowPaddingNewLinesBeforeExport": false,

  // Disallow an empty line above the specified keywords.
  "disallowPaddingNewlinesBeforeKeywords": false,

  // Disallows newline before line comments
  "disallowPaddingNewLinesBeforeLineComments": false,

  // Disallows blocks from beginning or ending with 2 newlines.
  "disallowPaddingNewlinesInBlocks": true,

  // Disallows newlines adjacent to curly braces in all object literals.
  "disallowPaddingNewLinesInObjects": false,

  // Disallows parentheses around arrow function expressions with a single
  // parameter.
  "disallowParenthesesAroundArrowParam": false,

  // Disallows quoted keys in object if possible.
  "disallowQuotedKeysInObjects": false,

  // Disallows lines from ending in a semicolon.
  "disallowSemicolons": false,

  // Require arrow functions to use a block statement (explicit return).
  "disallowShorthandArrowFunctions": false,

  // Requires sticking binary operators to the right.
  "disallowSpaceAfterBinaryOperators": false,

  // Disallows space after keyword.
  "disallowSpaceAfterKeywords": false,

  // Requires that a line comment (//) not be followed by a space.
  "disallowSpaceAfterLineComment": false,

  // Disallows space after object keys.
  "disallowSpaceAfterObjectKeys": true,

  // Requires sticking unary operators to the right.
  "disallowSpaceAfterPrefixUnaryOperators": true,

  // Requires sticking binary operators to the left.
  "disallowSpaceBeforeBinaryOperators": false,

  // Disallows space before block statements (for loops, control structures).
  "disallowSpaceBeforeBlockStatements": false,

  // Disallows spaces before commas
  "disallowSpaceBeforeComma": true,

  // Disallows space before keyword.
  "disallowSpaceBeforeKeywords": false,

  // Disallows space after object keys.
  "disallowSpaceBeforeObjectValues": false,

  // Requires sticking unary operators to the left.
  "disallowSpaceBeforePostfixUnaryOperators": true,

  // Disallows spaces before semicolons.
  "disallowSpaceBeforeSemicolon": true,

  // Ensure there are no spaces after argument separators in call expressions.
  "disallowSpaceBetweenArguments": false,

  // Disallows space before () or {} in anonymous function expressions.
  "disallowSpacesInAnonymousFunctionExpression": {
    "beforeOpeningRoundBrace": true
  },

  // Disallows space before () in call expressions.
  "disallowSpacesInCallExpression": true,

  // Disallows space before and/or after ? or : in conditional expressions.
  "disallowSpacesInConditionalExpression": false,

  // Disallow spaces in between for statement.
  "disallowSpacesInForStatement": false,

  // Disallows space before () or {} in function declarations.
  "disallowSpacesInFunctionDeclaration": {
    "beforeOpeningRoundBrace": true
  },

  // Disallows space before () or {} in function expressions (both named and anonymous).
  "disallowSpacesInFunctionExpression": {
    "beforeOpeningRoundBrace": true
  },

  // Disallows space before () or {} in function expressions (both named and
  // anonymous) and function declarations.
  "disallowSpacesInFunction": false,

  // Disallows space before () or {} in named function expressions.
  "disallowSpacesInNamedFunctionExpression": {
    "beforeOpeningRoundBrace": true
  },

  // Disallows space after opening array square bracket and before
  // closing. Reports only on arrays, not on property accessors. Use
  // disallowSpacesInsideBrackets to report on all brackets.
  "disallowSpacesInsideArrayBrackets": true,

  // Disallows space after opening square bracket and before closing. Reports on
  // all on brackets, even on property accessors. Use
  // disallowSpacesInsideArrayBrackets to exclude property accessors.
  "disallowSpacesInsideBrackets": true,

  // Disallows space after opening object curly brace and before closing.
  "disallowSpacesInsideObjectBrackets": true,

  // Disallows space after opening round bracket and before closing.
  "disallowSpacesInsideParentheses": true,

  // Disallows space after opening and before closing grouping parentheses.
  "disallowSpacesInsideParenthesizedExpression": {
    "allExcept": ["function"]
  },

  // // Disallows tabs everywhere.
  // "disallowTabs": true,

  // Disallows an extra comma following the final element of an array or object
  // literal.
  "disallowTrailingComma": true,

  // Requires all lines to end on a non-whitespace character
  "disallowTrailingWhitespace": true,

  // // Disallows unused params in function expression and function declaration.
  // "disallowUnusedParams": true,

  // Requires the variable to be the left hand operator when doing a boolean
  // comparison
  "disallowYodaConditions": true,

  // Validate jsdoc comments
  "jsDoc": {
    "checkAnnotations": "jsdoc3",
    "checkTypes": "strictNativeCase"
  },

  // Requires all lines to be at most the number of characters specified
  "maximumLineLength": 80,

  // Requires the file to be at most the number of lines specified
  "maximumNumberOfLines": false,

  // Requires proper alignment in object literals.
  "requireAlignedObjectValues": false,

  // Requires that a function expression be anonymous.
  "requireAnonymousFunctions": false,

  // Requires that arrow functions are used instead of anonymous function
  // expressions in callbacks.
  "requireArrowFunctions": false,

  // Requires blocks to begin and end with a newline
  "requireBlocksOnNewline": 1,

  // Requires identifiers to be camelCased or UPPERCASE_WITH_UNDERSCORES
  "requireCamelCaseOrUpperCaseIdentifiers": true,

  // Requires the first alphabetical character of a comment to be uppercase,
  // unless it is part of a multi-line textblock.
  "requireCapitalizedComments": false,

  // Requires constructors to be capitalized (except for this)
  "requireCapitalizedConstructors": true,

  // Requires commas as last token on a line in lists.
  "requireCommaBeforeLineBreak": false,

  // Requires curly braces after statements.
  "requireCurlyBraces": [
    "do"
  ],

  // Require a $ before variable names that are jquery assignments.
  "requireDollarBeforejQueryAssignment": false,

  // Requires member expressions to use dot notation when possible
  "requireDotNotation": true,

  // Requires function declarations by disallowing assignment of functions
  // expressions to variables. Function expressions are allowed in all other
  // contexts, including when passed as function arguments or immediately
  // invoked.
  "requireFunctionDeclarations": false,

  // Requires placing keywords on a new line.
  "requireKeywordsOnNewLine": false,

  // Requires placing line feed after assigning a variable.
  "requireLineBreakAfterVariableAssignment": false,

  // Requires placing line feed at file end.
  "requireLineFeedAtFileEnd": true,

  // Requires function names to match member and property names.
  "requireMatchingFunctionName": false,

  // // Requires the test, consequent and alternate to be on separate lines when
  // // using the ternary operator.
  // "requireMultiLineTernary": false,

  // Requires multiple var declaration.
  "requireMultipleVarDecl": false,

  // Require unassigned functions to be named inline
  "requireNamedUnassignedFunctions": false,

  // Requires newline before opening curly brace of all block statements.
  "requireNewlineBeforeBlockStatements": false,

  // Requires use of binary, hexadecimal, and octal literals instead of
  // parseInt.
  "requireNumericLiterals": false,

  // Requires placing object keys on new line
  "requireObjectKeysOnNewLine": false,

  // Requires operators to appear before line breaks and not after.
  "requireOperatorBeforeLineBreak": false,

  // Requires an extra blank newline after var declarations, as long as it is
  // not the last expression in the current block.
  "requirePaddingNewLineAfterVariableDeclaration": false,

  // Requires newline after blocks
  "requirePaddingNewLinesAfterBlocks": false,

  // Requires a blank line after 'use strict'; statements
  "requirePaddingNewLinesAfterUseStrict": false,

  // Requires newline before module.exports
  "requirePaddingNewLinesBeforeExport": false,

  // Requires an empty line above the specified keywords unless the keyword is
  // the first expression in a block.
  "requirePaddingNewlinesBeforeKeywords": false,

  // Requires newline before line comments
  "requirePaddingNewLinesBeforeLineComments": false,

  // Requires blocks to begin and end with 2 newlines
  "requirePaddingNewlinesInBlocks": false,

  // Requires newline inside curly braces of all objects.
  "requirePaddingNewLinesInObjects": false,

  // Requires parentheses around arrow function expressions with a single
  // parameter.
  "requireParenthesesAroundArrowParam": false,

  // Requires parentheses around immediately invoked function expressions.
  "requireParenthesesAroundIIFE": true,

  // Requires quoted keys in objects.
  "requireQuotedKeysInObjects": false,

  // Requires semicolon after:
  "requireSemicolons": false,

  // Require arrow functions to use an expression body when returning a single
  // statement (no block statement, implicit return).
  "requireShorthandArrowFunctions": false,

  // Disallows sticking binary operators to the right.
  "requireSpaceAfterBinaryOperators": true,

  // // Requires space after comma
  // "requireSpaceAfterComma": true,

  // Requires space after keyword.
  "requireSpaceAfterKeywords": [
    "if",
    "else",
    "for",
    "while",
    "do",
    "switch",
    "case",
    "return",
    "try",
    "catch"
  ],

  // Requires that a line comment (//) be followed by a space.
  "requireSpaceAfterLineComment": false,

  // Requires space after object keys.
  "requireSpaceAfterObjectKeys": false,

  // Disallows sticking unary operators to the right.
  "requireSpaceAfterPrefixUnaryOperators": false,

  // Disallows sticking binary operators to the left.
  "requireSpaceBeforeBinaryOperators": true,

  // Requires space(s) before block statements (for loops, control structures).
  "requireSpaceBeforeBlockStatements": true,

  // Requires space before comma
  "requireSpaceBeforeComma": false,

  // Requires space before keyword.
  "requireSpaceBeforeKeywords": false,

// Requires space after object keys.
  "requireSpaceBeforeObjectValues": false,

  // Disallows sticking unary operators to the left.
  "requireSpaceBeforePostfixUnaryOperators": false,

  // Ensure there are spaces after argument separators in call expressions.
  "requireSpaceBetweenArguments": true,

  // Requires space before () or {} in anonymous function expressions.
  "requireSpacesInAnonymousFunctionExpression": false,

  // Requires space before () in call expressions.
  "requireSpacesInCallExpression": false,

  // Requires space before and/or after ? or : in conditional expressions.
  "requireSpacesInConditionalExpression": false,

  // Requires spaces inbetween for statement.
  "requireSpacesInForStatement": true,

  // Requires space before () or {} in function declarations.
  "requireSpacesInFunctionDeclaration": false,

  // Requires space before () or {} in function expressions (both named and
  // anonymous).
  "requireSpacesInFunctionExpression": false,

  // Requires space before () or {} in function expressions (both named and
  // anonymous) and function declarations.
  "requireSpacesInFunction": false,

  // Requires space before () or {} in named function expressions.
  "requireSpacesInNamedFunctionExpression": false,

  // Requires space after opening array square bracket and before
  // closing. Reports only on arrays, not on property accessors. Use
  // requireSpacesInsideBrackets to report on all brackets.
  "requireSpacesInsideArrayBrackets": false,

  // Requires space after opening square bracket and before closing. Reports on
  // all on brackets, even on property accessors. Use
  // requireSpacesInsideArrayBrackets to exclude property accessors.
  "requireSpacesInsideBrackets": false,

  // Requires space after opening object curly brace and before closing.
  "requireSpacesInsideObjectBrackets": false,

  // Requires space after opening round bracket and before closing.
  "requireSpacesInsideParentheses": false,

  // Requires space after opening and before closing grouping parentheses.
  "requireSpacesInsideParenthesizedExpression": false,

  // Disallows using .apply in favor of the spread operator
  "requireSpread": false,

  // Requires the use of template strings instead of string concatenation.
  "requireTemplateStrings": false,

  // Requires an extra comma following the final element of an array or object
  // literal.
  "requireTrailingComma": false,

  // Requires var declaration to be on the top of an enclosing scope
  "requireVarDeclFirst": false,

  // Requires the variable to be the right hand operator when doing a boolean
  // comparison
  "requireYodaConditions": false,

  // Option to check var that = this expressions
  "safeContextKeyword": false,

  // Validates proper alignment of function parameters.
  "validateAlignedFunctionParameters": false,

  // // This rule is for validating the positioning of line comments. Block
  // // comments are ignored.
  // "validateCommentPosition": false,

  // Validates indentation for switch statements and block statements
  "validateIndentation": {
    "value": 2,
    "allExcept": ["comments"]
  },

  // Option to check line break characters
  "validateLineBreaks": "LF",

  // Requires each element in array on a single line when array length is more
  // than passed maximum number or array fills more than one line.
  "validateNewlineAfterArrayElements": false,

  // Validates the order in object keys.
  "validateOrderInObjectKeys": false,

  // Enable validation of separators between function parameters. Will ignore
  // newlines.
  "validateParameterSeparator": false,

  // Requires all quote marks to be either the supplied value, or consistent if
  // true
  "validateQuoteMarks": "\""
}
